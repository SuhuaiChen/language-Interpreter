
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun Mar 03 20:26:57 CET 2024
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun Mar 03 20:26:57 CET 2024
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\002\003\000\002\002\004\000\002\003" +
    "\006\000\002\004\004\000\002\004\002\000\002\005\003" +
    "\000\002\005\002\000\002\006\004\000\002\006\003\000" +
    "\002\007\006\000\002\007\003\000\002\010\003\000\002" +
    "\010\006\000\002\010\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\012\005" +
    "\000\002\012\003\000\002\013\005\000\002\013\003\000" +
    "\002\014\003\000\002\014\004\000\002\014\004\000\002" +
    "\015\007\000\002\016\004\000\002\017\003\000\002\017" +
    "\002\000\002\020\005\000\002\020\003\000\002\021\005" +
    "\000\002\022\003\000\002\022\002\000\002\023\005\000" +
    "\002\023\003\000\002\024\004\000\002\024\006\000\002" +
    "\024\005\000\002\024\004\000\002\024\004\000\002\024" +
    "\003\000\002\024\004\000\002\024\004\000\002\024\007" +
    "\000\002\024\003\000\002\025\004\000\002\025\002\000" +
    "\002\026\003\000\002\026\002\000\002\027\004\000\002" +
    "\030\005\000\002\030\002\000\002\031\004\000\002\032" +
    "\004\000\002\032\002\000\002\033\004\000\002\034\005" +
    "\000\002\034\002\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\036\005\000\002\037\005\000\002\037" +
    "\002\000\002\040\004\000\002\040\002\000\002\041\004" +
    "\000\002\042\004\000\002\042\002\000\002\043\004\000" +
    "\002\044\005\000\002\044\002\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\046\004\000\002\046" +
    "\003\000\002\047\003\000\002\047\003\000\002\050\004" +
    "\000\002\051\004\000\002\051\002\000\002\052\005\000" +
    "\002\052\004\000\002\052\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\005\000\002\053\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\004\025\004\001\002\000\052\004\012\015" +
    "\ufffd\025\ufffd\026\ufffd\040\023\041\031\042\025\047\016" +
    "\052\015\054\020\055\ufffd\057\ufffd\060\011\061\ufffd\062" +
    "\ufffd\063\ufffd\064\ufffd\065\ufffd\066\014\067\ufffd\001\002" +
    "\000\004\002\007\001\002\000\004\002\001\001\002\000" +
    "\004\002\000\001\002\000\010\004\ufff6\044\ufff6\050\ufff6" +
    "\001\002\000\004\025\222\001\002\000\010\004\ufff4\044" +
    "\ufff4\050\ufff4\001\002\000\006\024\uffec\027\uffec\001\002" +
    "\000\020\004\012\040\023\041\031\042\025\047\016\052" +
    "\015\060\011\001\002\000\010\004\ufff0\044\ufff0\050\ufff0" +
    "\001\002\000\020\004\012\040\023\041\031\042\025\047" +
    "\016\052\015\060\011\001\002\000\006\024\uffeb\027\uffeb" +
    "\001\002\000\004\004\204\001\002\000\030\015\055\025" +
    "\004\026\ufffb\055\052\057\043\061\044\062\053\063\042" +
    "\064\054\065\051\067\056\001\002\000\004\025\004\001" +
    "\002\000\010\004\ufff1\044\ufff1\050\ufff1\001\002\000\010" +
    "\004\ufff7\044\ufff7\050\ufff7\001\002\000\010\004\ufff2\044" +
    "\ufff2\050\ufff2\001\002\000\006\024\037\027\036\001\002" +
    "\000\010\004\ufff9\044\033\050\ufff9\001\002\000\004\004" +
    "\032\001\002\000\010\004\ufff3\044\ufff3\050\ufff3\001\002" +
    "\000\012\010\uffe7\024\uffe7\026\uffe7\027\uffe7\001\002\000" +
    "\004\031\034\001\002\000\004\045\035\001\002\000\010" +
    "\004\ufff8\044\ufff8\050\ufff8\001\002\000\030\015\ufffe\025" +
    "\ufffe\026\ufffe\055\ufffe\057\ufffe\061\ufffe\062\ufffe\063\ufffe" +
    "\064\ufffe\065\ufffe\067\ufffe\001\002\000\024\004\012\040" +
    "\023\041\031\042\025\047\016\052\015\054\020\060\011" +
    "\066\014\001\002\000\006\024\uffed\027\uffed\001\002\000" +
    "\006\024\uffe9\027\uffe9\001\002\000\026\004\064\005\100" +
    "\012\061\031\062\032\074\033\067\034\101\037\063\051" +
    "\070\053\105\001\002\000\026\004\064\005\100\012\061" +
    "\031\062\032\074\033\067\034\101\037\063\051\070\053" +
    "\105\001\002\000\026\004\064\005\100\012\061\031\062" +
    "\032\074\033\067\034\101\037\063\051\070\053\105\001" +
    "\002\000\006\024\uffd4\026\uffd4\001\002\000\004\026\177" +
    "\001\002\000\006\024\175\026\ufffc\001\002\000\006\024" +
    "\uffde\026\uffde\001\002\000\006\024\uffd8\026\uffd8\001\002" +
    "\000\026\004\064\005\100\012\061\031\062\032\074\033" +
    "\067\034\101\037\063\051\070\053\105\001\002\000\026" +
    "\004\064\005\100\012\061\031\062\032\074\033\067\034" +
    "\101\037\063\051\070\053\105\001\002\000\026\004\064" +
    "\005\100\012\061\031\062\032\074\033\067\034\101\037" +
    "\063\051\070\053\105\001\002\000\026\004\064\005\100" +
    "\012\061\031\062\032\074\033\067\034\101\037\063\051" +
    "\070\053\105\001\002\000\004\004\057\001\002\000\004" +
    "\005\060\001\002\000\030\004\064\005\100\006\uffd0\012" +
    "\061\031\062\032\074\033\067\034\101\037\063\051\070" +
    "\053\105\001\002\000\026\004\uffaf\005\uffaf\012\uffaf\031" +
    "\uffaf\032\uffaf\033\uffaf\034\uffaf\037\uffaf\051\uffaf\053\uffaf" +
    "\001\002\000\056\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012" +
    "\uffa7\013\uffa7\014\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7" +
    "\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\035\uffa7\043" +
    "\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\001\002\000\026" +
    "\004\uffb0\005\uffb0\012\uffb0\031\uffb0\032\uffb0\033\uffb0\034" +
    "\uffb0\037\uffb0\051\uffb0\053\uffb0\001\002\000\056\006\uffa8" +
    "\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\016" +
    "\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8" +
    "\025\uffa8\026\uffa8\035\uffa8\043\uffa8\044\uffa8\045\uffa8\046" +
    "\uffa8\047\uffa8\001\002\000\056\006\uffac\007\uffac\010\uffac" +
    "\011\uffac\012\uffac\013\uffac\014\uffac\016\uffac\017\uffac\020" +
    "\uffac\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac" +
    "\035\uffac\043\uffac\044\154\045\uffac\046\155\047\156\001" +
    "\002\000\050\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1" +
    "\013\uffb1\014\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022" +
    "\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\035\uffb1\043\uffb1" +
    "\045\uffb1\001\002\000\056\006\uffa5\007\uffa5\010\uffa5\011" +
    "\uffa5\012\uffa5\013\uffa5\014\uffa5\016\uffa5\017\uffa5\020\uffa5" +
    "\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\035" +
    "\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\001\002" +
    "\000\056\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013" +
    "\uffa3\014\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3" +
    "\023\uffa3\024\uffa3\025\uffa3\026\uffa3\035\uffa3\043\uffa3\044" +
    "\uffa3\045\uffa3\046\uffa3\047\uffa3\001\002\000\050\006\uffb6" +
    "\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\150\014\147\016" +
    "\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\026\uffb6\035\uffb6\043\146\045\uffb6\001\002\000" +
    "\042\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\016\uffb9" +
    "\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025" +
    "\uffb9\026\uffb9\035\143\045\uffb9\001\002\000\040\006\uffbc" +
    "\007\uffbc\010\uffbc\011\uffbc\012\134\016\uffbc\017\uffbc\020" +
    "\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc" +
    "\045\uffbc\001\002\000\056\006\uffa6\007\uffa6\010\uffa6\011" +
    "\uffa6\012\uffa6\013\uffa6\014\uffa6\016\uffa6\017\uffa6\020\uffa6" +
    "\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\035" +
    "\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\001\002" +
    "\000\034\006\uffc7\007\uffc7\010\uffc7\016\124\017\127\020" +
    "\121\021\126\022\122\023\130\024\uffc7\025\uffc7\026\uffc7" +
    "\045\uffc7\001\002\000\020\006\uffca\007\117\010\uffca\024" +
    "\uffca\025\uffca\026\uffca\045\uffca\001\002\000\006\006\uffcd" +
    "\010\112\001\002\000\026\004\064\005\100\012\061\031" +
    "\062\032\074\033\067\034\101\037\063\051\070\053\105" +
    "\001\002\000\056\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012" +
    "\uffa4\013\uffa4\014\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4" +
    "\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\035\uffa4\043" +
    "\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\001\002\000\004" +
    "\006\uffd1\001\002\000\026\004\064\005\100\012\061\031" +
    "\062\032\074\033\067\034\101\037\063\051\070\053\105" +
    "\001\002\000\004\006\106\001\002\000\056\006\uffa1\007" +
    "\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\016\uffa1" +
    "\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025" +
    "\uffa1\026\uffa1\035\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1" +
    "\047\uffa1\001\002\000\006\024\uffd5\026\uffd5\001\002\000" +
    "\050\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2" +
    "\014\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023" +
    "\uffb2\024\uffb2\025\uffb2\026\uffb2\035\uffb2\043\uffb2\045\uffb2" +
    "\001\002\000\004\006\111\001\002\000\056\006\uffa2\007" +
    "\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\016\uffa2" +
    "\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025" +
    "\uffa2\026\uffa2\035\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2" +
    "\047\uffa2\001\002\000\026\004\064\005\100\012\061\031" +
    "\062\032\074\033\067\034\101\037\063\051\070\053\105" +
    "\001\002\000\004\006\uffcf\001\002\000\006\006\uffcd\010" +
    "\112\001\002\000\004\006\uffce\001\002\000\016\006\uffcc" +
    "\010\uffcc\024\uffcc\025\uffcc\026\uffcc\045\uffcc\001\002\000" +
    "\026\004\064\005\100\012\061\031\062\032\074\033\067" +
    "\034\101\037\063\051\070\053\105\001\002\000\016\006" +
    "\uffcb\010\uffcb\024\uffcb\025\uffcb\026\uffcb\045\uffcb\001\002" +
    "\000\026\004\uffc6\005\uffc6\012\uffc6\031\uffc6\032\uffc6\033" +
    "\uffc6\034\uffc6\037\uffc6\051\uffc6\053\uffc6\001\002\000\026" +
    "\004\uffc2\005\uffc2\012\uffc2\031\uffc2\032\uffc2\033\uffc2\034" +
    "\uffc2\037\uffc2\051\uffc2\053\uffc2\001\002\000\020\006\uffc9" +
    "\007\uffc9\010\uffc9\024\uffc9\025\uffc9\026\uffc9\045\uffc9\001" +
    "\002\000\026\004\uffc5\005\uffc5\012\uffc5\031\uffc5\032\uffc5" +
    "\033\uffc5\034\uffc5\037\uffc5\051\uffc5\053\uffc5\001\002\000" +
    "\026\004\064\005\100\012\061\031\062\032\074\033\067" +
    "\034\101\037\063\051\070\053\105\001\002\000\026\004" +
    "\uffc4\005\uffc4\012\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4" +
    "\037\uffc4\051\uffc4\053\uffc4\001\002\000\026\004\uffc3\005" +
    "\uffc3\012\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\037\uffc3" +
    "\051\uffc3\053\uffc3\001\002\000\026\004\uffc1\005\uffc1\012" +
    "\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\037\uffc1\051\uffc1" +
    "\053\uffc1\001\002\000\034\006\uffc7\007\uffc7\010\uffc7\016" +
    "\124\017\127\020\121\021\126\022\122\023\130\024\uffc7" +
    "\025\uffc7\026\uffc7\045\uffc7\001\002\000\020\006\uffc8\007" +
    "\uffc8\010\uffc8\024\uffc8\025\uffc8\026\uffc8\045\uffc8\001\002" +
    "\000\036\006\uffbe\007\uffbe\010\uffbe\011\137\016\uffbe\017" +
    "\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe" +
    "\026\uffbe\045\uffbe\001\002\000\026\004\064\005\100\012" +
    "\061\031\062\032\074\033\067\034\101\037\063\051\070" +
    "\053\105\001\002\000\036\006\uffbd\007\uffbd\010\uffbd\011" +
    "\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd" +
    "\024\uffbd\025\uffbd\026\uffbd\045\uffbd\001\002\000\034\006" +
    "\uffc0\007\uffc0\010\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0" +
    "\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\045\uffc0\001" +
    "\002\000\026\004\064\005\100\012\061\031\062\032\074" +
    "\033\067\034\101\037\063\051\070\053\105\001\002\000" +
    "\036\006\uffbe\007\uffbe\010\uffbe\011\137\016\uffbe\017\uffbe" +
    "\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026" +
    "\uffbe\045\uffbe\001\002\000\034\006\uffbf\007\uffbf\010\uffbf" +
    "\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024" +
    "\uffbf\025\uffbf\026\uffbf\045\uffbf\001\002\000\040\006\uffbb" +
    "\007\uffbb\010\uffbb\011\uffbb\012\uffbb\016\uffbb\017\uffbb\020" +
    "\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb" +
    "\045\uffbb\001\002\000\026\004\064\005\100\012\061\031" +
    "\062\032\074\033\067\034\101\037\063\051\070\053\105" +
    "\001\002\000\040\006\uffba\007\uffba\010\uffba\011\uffba\012" +
    "\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba" +
    "\024\uffba\025\uffba\026\uffba\045\uffba\001\002\000\026\004" +
    "\064\005\100\012\061\031\062\032\074\033\067\034\101" +
    "\037\063\051\070\053\105\001\002\000\026\004\uffb3\005" +
    "\uffb3\012\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\037\uffb3" +
    "\051\uffb3\053\uffb3\001\002\000\026\004\uffb4\005\uffb4\012" +
    "\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\037\uffb4\051\uffb4" +
    "\053\uffb4\001\002\000\026\004\uffb5\005\uffb5\012\uffb5\031" +
    "\uffb5\032\uffb5\033\uffb5\034\uffb5\037\uffb5\051\uffb5\053\uffb5" +
    "\001\002\000\042\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012" +
    "\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8" +
    "\024\uffb8\025\uffb8\026\uffb8\035\uffb8\045\uffb8\001\002\000" +
    "\050\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\150" +
    "\014\147\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023" +
    "\uffb6\024\uffb6\025\uffb6\026\uffb6\035\uffb6\043\146\045\uffb6" +
    "\001\002\000\042\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012" +
    "\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7" +
    "\024\uffb7\025\uffb7\026\uffb7\035\uffb7\045\uffb7\001\002\000" +
    "\026\004\064\005\100\012\061\031\062\032\074\033\067" +
    "\034\101\037\063\051\070\053\105\001\002\000\004\004" +
    "\162\001\002\000\056\006\uffa9\007\uffa9\010\uffa9\011\uffa9" +
    "\012\uffa9\013\uffa9\014\uffa9\016\uffa9\017\uffa9\020\uffa9\021" +
    "\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\035\uffa9" +
    "\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\001\002\000" +
    "\050\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae\013\uffae" +
    "\014\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023" +
    "\uffae\024\uffae\025\uffae\026\uffae\035\uffae\043\uffae\045\uffae" +
    "\001\002\000\056\006\uffac\007\uffac\010\uffac\011\uffac\012" +
    "\uffac\013\uffac\014\uffac\016\uffac\017\uffac\020\uffac\021\uffac" +
    "\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac\035\uffac\043" +
    "\uffac\044\154\045\uffac\046\155\047\156\001\002\000\050" +
    "\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad\014" +
    "\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad" +
    "\024\uffad\025\uffad\026\uffad\035\uffad\043\uffad\045\uffad\001" +
    "\002\000\056\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa" +
    "\013\uffaa\014\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022" +
    "\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\035\uffaa\043\uffaa" +
    "\044\uffaa\045\uffaa\046\uffaa\047\uffaa\001\002\000\004\045" +
    "\164\001\002\000\056\006\uffab\007\uffab\010\uffab\011\uffab" +
    "\012\uffab\013\uffab\014\uffab\016\uffab\017\uffab\020\uffab\021" +
    "\uffab\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab\035\uffab" +
    "\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\001\002\000" +
    "\006\024\uffdd\026\uffdd\001\002\000\006\024\uffd9\026\uffd9" +
    "\001\002\000\006\024\uffd6\026\uffd6\001\002\000\004\025" +
    "\004\001\002\000\010\024\uffd2\026\uffd2\056\172\001\002" +
    "\000\004\025\004\001\002\000\006\024\uffdc\026\uffdc\001" +
    "\002\000\006\024\uffd3\026\uffd3\001\002\000\026\015\055" +
    "\025\004\055\052\057\043\061\044\062\053\063\042\064" +
    "\054\065\051\067\056\001\002\000\006\024\uffdf\026\uffdf" +
    "\001\002\000\014\002\uffff\024\uffff\026\uffff\027\uffff\056" +
    "\uffff\001\002\000\006\024\uffd7\026\uffd7\001\002\000\004" +
    "\025\004\001\002\000\006\024\uffdb\026\uffdb\001\002\000" +
    "\006\024\uffda\026\uffda\001\002\000\004\005\205\001\002" +
    "\000\022\004\012\006\uffe5\040\023\041\031\042\025\047" +
    "\016\052\015\060\011\001\002\000\006\004\uffe0\050\215" +
    "\001\002\000\004\006\214\001\002\000\006\006\uffe3\010" +
    "\212\001\002\000\004\006\uffe6\001\002\000\020\004\012" +
    "\040\023\041\031\042\025\047\016\052\015\060\011\001" +
    "\002\000\004\006\uffe4\001\002\000\004\025\uffe8\001\002" +
    "\000\004\004\uffe1\001\002\000\004\004\217\001\002\000" +
    "\006\006\uffe2\010\uffe2\001\002\000\006\004\ufffa\050\ufffa" +
    "\001\002\000\006\024\uffea\027\uffea\001\002\000\020\004" +
    "\012\040\023\041\031\042\025\047\016\052\015\060\011" +
    "\001\002\000\006\010\226\026\uffee\001\002\000\004\026" +
    "\225\001\002\000\010\004\ufff5\044\ufff5\050\ufff5\001\002" +
    "\000\020\004\012\040\023\041\031\042\025\047\016\052" +
    "\015\060\011\001\002\000\004\026\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\006\002\004\003\005\001\001\000\024\004" +
    "\020\006\027\007\026\010\023\011\007\013\025\014\012" +
    "\015\021\016\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\006\027\007" +
    "\026\010\023\011\007\016\220\001\001\000\002\001\001" +
    "\000\012\006\217\007\026\010\023\011\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\044\005\045" +
    "\023\046\024\047\001\001\000\004\003\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\006\027\007" +
    "\026\010\023\011\007\014\037\015\021\016\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\031\202\033" +
    "\075\036\074\041\072\043\071\046\070\047\102\050\065" +
    "\053\064\001\001\000\024\031\200\033\075\036\074\041" +
    "\072\043\071\046\070\047\102\050\065\053\064\001\001" +
    "\000\024\031\177\033\075\036\074\041\072\043\071\046" +
    "\070\047\102\050\065\053\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\031\167\033\075\036\074\041\072" +
    "\043\071\046\070\047\102\050\065\053\064\001\001\000" +
    "\024\031\166\033\075\036\074\041\072\043\071\046\070" +
    "\047\102\050\065\053\064\001\001\000\024\031\165\033" +
    "\075\036\074\041\072\043\071\046\070\047\102\050\065" +
    "\053\064\001\001\000\024\031\164\033\075\036\074\041" +
    "\072\043\071\046\070\047\102\050\065\053\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\026\103\027" +
    "\101\031\076\033\075\036\074\041\072\043\071\046\070" +
    "\047\102\050\065\053\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\051\156\052\157\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\044\150\045\144\001\001" +
    "\000\004\042\141\001\001\000\004\040\132\001\001\000" +
    "\002\001\001\000\006\034\122\035\124\001\001\000\004" +
    "\032\115\001\001\000\004\030\112\001\001\000\024\031" +
    "\107\033\075\036\074\041\072\043\071\046\070\047\102" +
    "\050\065\053\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\046\106\047\102\050\065\053\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\031\113\033\075\036\074\041\072\043\071\046\070\047" +
    "\102\050\065\053\064\001\001\000\002\001\001\000\004" +
    "\030\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\031\117\033\075\036\074\041\072\043\071\046\070" +
    "\047\102\050\065\053\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\036\130\041\072\043\071\046\070\047" +
    "\102\050\065\053\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\034\131\035\124\001" +
    "\001\000\002\001\001\000\004\037\135\001\001\000\016" +
    "\041\134\043\071\046\070\047\102\050\065\053\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\041\137" +
    "\043\071\046\070\047\102\050\065\053\064\001\001\000" +
    "\004\037\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\041\143\043\071\046\070\047\102\050\065\053" +
    "\064\001\001\000\002\001\001\000\012\046\151\047\102" +
    "\050\065\053\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\044\152" +
    "\045\144\001\001\000\002\001\001\000\024\031\162\033" +
    "\075\036\074\041\072\043\071\046\070\047\102\050\065" +
    "\053\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\051\160\052\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\170\001\001\000\004\025\172\001\001\000" +
    "\004\003\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\044\024\175\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\201\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\006\205\007\026\010\023\011\007\017\206\020\210" +
    "\021\207\001\001\000\004\022\215\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\006\205" +
    "\007\026\010\023\011\007\020\212\021\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\027\007\026\010\023\011\007\012\223" +
    "\016\222\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\027\007\026\010\023\011\007" +
    "\012\226\016\222\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
  return getScanner().next_token(); 

    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
              Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
      		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloque ::= LLAP declaraciones_opt instrucciones_opt LLCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("bloque",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones_opt ::= declaraciones SEP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaraciones_opt",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones_opt ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaraciones_opt",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones_opt ::= instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instrucciones_opt",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones_opt ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instrucciones_opt",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipo1 ::= CIRCUNFLEJO tipo1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipo1 ::= tipo2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo2 ::= tipo2 CAP LITERALENTERO CCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo2",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo2 ::= tipo3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo2",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo3 ::= tipoBasico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo3",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo3 ::= STRUCT LLAP typeDeclaracion LLCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo3",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo3 ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo3",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipoBasico ::= ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipoBasico",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipoBasico ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipoBasico",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipoBasico ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipoBasico",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipoBasico ::= STRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipoBasico",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // typeDeclaracion ::= variable COMA typeDeclaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("typeDeclaracion",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // typeDeclaracion ::= variable 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("typeDeclaracion",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaraciones ::= declaraciones PYC declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaraciones",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaraciones",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracion ::= variable 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracion ::= TYPE variable 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracion ::= header bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // header ::= PROC IDEN PAP parametrosFormales_opt PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("header",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // variable ::= tipo1 IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("variable",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parametrosFormales_opt ::= parametrosFormales 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parametrosFormales_opt",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parametrosFormales_opt ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parametrosFormales_opt",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parametrosFormales ::= parametroFormal COMA parametrosFormales 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parametrosFormales",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametrosFormales ::= parametroFormal 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parametrosFormales",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parametroFormal ::= tipo1 referencia_opt IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parametroFormal",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // referencia_opt ::= AMP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("referencia_opt",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // referencia_opt ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("referencia_opt",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instrucciones ::= instrucciones PYC instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instrucciones",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instrucciones",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccion ::= EVAL E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion ::= IF E0 bloque IFR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccion ::= WHILE E0 bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccion ::= READ E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion ::= WRITE E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= NL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion ::= NEW E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccion ::= DELETE E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccion ::= CALL IDEN PAP parametrosReales_opt PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccion ::= bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IFR ::= ELSE bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IFR",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IFR ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IFR",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametrosReales_opt ::= parametrosReales 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parametrosReales_opt",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametrosReales_opt ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parametrosReales_opt",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametrosReales ::= E0 RparametrosReales 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parametrosReales",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // RparametrosReales ::= COMA E0 RparametrosReales 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RparametrosReales",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RparametrosReales ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RparametrosReales",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E0 ::= E1 FE1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FE1 ::= ASIG E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FE1",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FE1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FE1",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E1 ::= E2 RE1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // RE1 ::= OP1 E2 RE1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RE1",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // RE1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RE1",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OP1 ::= LT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OP1 ::= GT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OP1 ::= LE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OP1 ::= GE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OP1 ::= EQ 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OP1 ::= NE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E2 ::= E3 FE3 RE2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // RE2 ::= MAS E3 RE2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RE2",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // RE2 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RE2",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FE3 ::= MENOS E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FE3",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FE3 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FE3",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E3 ::= E4 FE4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FE4 ::= AND E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FE4",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FE4 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FE4",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E4 ::= E5 RE4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // RE4 ::= OP4 E5 RE4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RE4",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // RE4 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RE4",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP4 ::= POR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP4",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OP4 ::= DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP4",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP4 ::= MOD 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP4",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E5 ::= OP5 E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E5 ::= E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP5 ::= NOT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP5",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP5 ::= MENOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP5",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E6 ::= E7 RE6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // RE6 ::= OP6 RE6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RE6",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // RE6 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RE6",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OP6 ::= CAP E0 CCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP6",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OP6 ::= PUNTO IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP6",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OP6 ::= CIRCUNFLEJO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP6",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E7 ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E7 ::= LITERALENTERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E7 ::= LITERALREAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E7 ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E7 ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E7 ::= LITERALCADENA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E7 ::= PAP E0 PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E7 ::= NULL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}


package asint;

import asint.SintaxisAbstractaTiny.*;

public interface Procesamiento {
	void procesa(Prog prog);
	void procesa(Bloq bloq);
	void procesa(Si_decs si_decs);
	void procesa(No_decs no_decs);
	void procesa(Si_instrs si_instrs);
	void procesa(No_instrs no_instrs);
	void procesa(Si_tipo si_tipo);
	void procesa(No_tipo no_tipo);
	void procesa(Tipo_lista tipo_lista);
	void procesa(Tipo_circum tipo_circum);
	void procesa(Tipo_struct tipo_struct);
	void procesa(Tipo_iden tipo_iden);
	void procesa(Tipo_int tipo_int);
	void procesa(Tipo_real tipo_real);
	void procesa(Tipo_bool tipo_bool);
	void procesa(Tipo_string tipo_string);
	void procesa(Muchos_campos muchos_campos);
	void procesa(Un_campo un_campo);
	void procesa(Crea_campo crea_campo);
	void procesa(Muchas_decs muchas_decs);
	void procesa(Una_dec una_dec);
	void procesa(Dec_variable dec_variable);
	void procesa(Dec_tipo dec_tipo);
	void procesa(Dec_proc dec_proc);
	void procesa(Si_parsF si_parsF);
	void procesa(No_parsF no_parsF);
	void procesa(Muchos_parsF muchos_parsF);
	void procesa(Un_parF un_parF);
	void procesa(ParamF paramF);
	void procesa(Param param);
	void procesa(Muchas_instrs muchas_instrs);
	void procesa(Una_instr una_instr);
	void procesa(Instr_eval instr_eval);
	void procesa(Instr_if instr_if);
	void procesa(Instr_ifelse instr_ifelse);
	void procesa(Instr_while instr_while);
	void procesa(Instr_read instr_read);
	void procesa(Instr_write instr_write);
	void procesa(Instr_nl instr_nl);
	void procesa(Instr_new instr_new);
	void procesa(Instr_del instr_del);
	void procesa(Instr_call instr_call);
	void procesa(Instr_bloque instr_bloque);
	void procesa(Si_parsRe si_parsRe);
	void procesa(No_parsRe no_parsRe);
	void procesa(Muchos_parsRe muchos_parsRe);
	void procesa(Un_parRe un_parRe);
	void procesa(Suma suma);
	void procesa(Resta resta);
	void procesa(Mul mul);
	void procesa(Div div);
	void procesa(Mod mod);
	void procesa(Asig asig);
	void procesa(MenorI menorI);
	void procesa(Menor menor);
	void procesa(MayorI mayorI);
	void procesa(Mayor mayor);
	void procesa(Igual igual);
	void procesa(Distint distint);
	void procesa(And and);
	void procesa(Or or);
	void procesa(Negacion negacion);
	void procesa(MenosUnario menosUnario);
	void procesa(Indexacion indexacion);
	void procesa(Acceso acceso);
	void procesa(Indireccion indireccion);
	void procesa(Iden iden);
	void procesa(Lit_ent lit_ent);
	void procesa(Lit_real lit_real);
	void procesa(TRUE true1);
	void procesa(FALSE false1);
	void procesa(Lit_cadena lit_cadena);
	void procesa(NULL null1);
	/*void procesa(DecsOp decsOp);
	void procesa(InstrsOp instrsOp);
	void procesa(ParsFOp parsFOp);
	void procesa(ParsReOp parsReOp);*/
	
}

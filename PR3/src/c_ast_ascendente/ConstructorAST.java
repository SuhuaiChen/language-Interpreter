
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140611 (SVN rev 31)
// Thu Apr 11 18:21:50 CEST 2024
//----------------------------------------------------

package c_ast_ascendente;

import java_cup.runtime.*;
import asint.ClaseSemanticaTiny;
import asint.SintaxisAbstractaTiny.Prog;
import asint.SintaxisAbstractaTiny.Bloq;
import asint.SintaxisAbstractaTiny.DecsOp;
import asint.SintaxisAbstractaTiny.Decs;
import asint.SintaxisAbstractaTiny.Dec;
import asint.SintaxisAbstractaTiny.InstrsOp;
import asint.SintaxisAbstractaTiny.Instrs;
import asint.SintaxisAbstractaTiny.Instr;
import asint.SintaxisAbstractaTiny.Tipo;
import asint.SintaxisAbstractaTiny.Exp;
import asint.SintaxisAbstractaTiny.Campos;
import asint.SintaxisAbstractaTiny.Campo;
import asint.SintaxisAbstractaTiny.ParsFOp;
import asint.SintaxisAbstractaTiny.ParsF;
import asint.SintaxisAbstractaTiny.ParF;
import asint.SintaxisAbstractaTiny.ParsReOp;
import asint.SintaxisAbstractaTiny.ParsRe;
import c_ast_ascendente.UnidadLexica.StringLocalizado;

/** CUP v0.11b 20140611 (SVN rev 31) generated parser.
  * @version Thu Apr 11 18:21:50 CEST 2024
  */
public class ConstructorAST extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorAST() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorAST(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorAST(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\003\000\002\002\004\000\002\003" +
    "\006\000\002\004\004\000\002\004\002\000\002\007\003" +
    "\000\002\007\002\000\002\012\006\000\002\012\003\000" +
    "\002\013\004\000\002\013\003\000\002\014\003\000\002" +
    "\014\006\000\002\014\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\026\005" +
    "\000\002\026\003\000\002\027\004\000\002\005\005\000" +
    "\002\005\003\000\002\006\004\000\002\006\005\000\002" +
    "\006\010\000\002\030\003\000\002\030\002\000\002\031" +
    "\005\000\002\031\003\000\002\032\005\000\002\032\004" +
    "\000\002\010\005\000\002\010\003\000\002\011\004\000" +
    "\002\011\005\000\002\011\007\000\002\011\005\000\002" +
    "\011\004\000\002\011\004\000\002\011\003\000\002\011" +
    "\004\000\002\011\004\000\002\011\007\000\002\011\003" +
    "\000\002\033\003\000\002\033\002\000\002\034\005\000" +
    "\002\034\003\000\002\016\005\000\002\016\003\000\002" +
    "\017\005\000\002\017\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\020\005\000\002\020\005\000" +
    "\002\020\003\000\002\021\005\000\002\021\005\000\002" +
    "\021\003\000\002\022\005\000\002\022\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\023\004" +
    "\000\002\023\003\000\002\037\003\000\002\037\003\000" +
    "\002\024\006\000\002\024\005\000\002\024\004\000\002" +
    "\024\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\005\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\004\011\004\001\002\000\052\007\ufffd\011" +
    "\ufffd\012\ufffd\014\013\015\014\016\025\022\020\023\022" +
    "\024\ufffd\026\ufffd\027\015\030\ufffd\031\ufffd\032\ufffd\033" +
    "\ufffd\034\ufffd\035\023\036\ufffd\037\016\057\026\001\002" +
    "\000\004\002\007\001\002\000\004\002\001\001\002\000" +
    "\004\002\000\001\002\000\010\021\ufff7\037\ufff7\066\ufff7" +
    "\001\002\000\010\021\ufff9\037\ufff9\066\ufff9\001\002\000" +
    "\006\037\213\066\157\001\002\000\010\021\ufff1\037\ufff1" +
    "\066\ufff1\001\002\000\010\021\ufff3\037\ufff3\066\ufff3\001" +
    "\002\000\004\011\203\001\002\000\010\021\ufff4\037\ufff4" +
    "\066\ufff4\001\002\000\006\010\201\013\200\001\002\000" +
    "\010\021\ufff0\037\ufff0\066\ufff0\001\002\000\010\021\ufff6" +
    "\037\ufff6\066\ufff6\001\002\000\004\037\163\001\002\000" +
    "\020\014\013\015\014\016\025\022\020\027\015\037\016" +
    "\057\026\001\002\000\006\010\uffeb\013\uffeb\001\002\000" +
    "\010\021\ufff2\037\ufff2\066\ufff2\001\002\000\020\014\013" +
    "\015\014\016\025\022\020\027\015\037\016\057\026\001" +
    "\002\000\030\007\043\011\004\012\ufffb\024\037\026\031" +
    "\030\032\031\041\032\030\033\042\034\040\036\044\001" +
    "\002\000\026\004\066\037\053\042\047\056\051\060\050" +
    "\061\062\062\057\063\054\064\067\065\073\001\002\000" +
    "\026\004\066\037\053\042\047\056\051\060\050\061\062" +
    "\062\057\063\054\064\067\065\073\001\002\000\026\004" +
    "\066\037\053\042\047\056\051\060\050\061\062\062\057" +
    "\063\054\064\067\065\073\001\002\000\006\010\uffd5\012" +
    "\uffd5\001\002\000\004\012\150\001\002\000\006\010\146" +
    "\012\ufffc\001\002\000\006\010\uffe0\012\uffe0\001\002\000" +
    "\026\004\066\037\053\042\047\056\051\060\050\061\062" +
    "\062\057\063\054\064\067\065\073\001\002\000\006\010" +
    "\uffd9\012\uffd9\001\002\000\026\004\066\037\053\042\047" +
    "\056\051\060\050\061\062\062\057\063\054\064\067\065" +
    "\073\001\002\000\026\004\066\037\053\042\047\056\051" +
    "\060\050\061\062\062\057\063\054\064\067\065\073\001" +
    "\002\000\026\004\066\037\053\042\047\056\051\060\050" +
    "\061\062\062\057\063\054\064\067\065\073\001\002\000" +
    "\004\037\045\001\002\000\004\004\046\001\002\000\030" +
    "\004\066\005\uffd3\037\053\042\047\056\051\060\050\061" +
    "\062\062\057\063\054\064\067\065\073\001\002\000\026" +
    "\004\uffb8\037\uffb8\042\uffb8\056\uffb8\060\uffb8\061\uffb8\062" +
    "\uffb8\063\uffb8\064\uffb8\065\uffb8\001\002\000\060\005\uffb2" +
    "\006\uffb2\010\uffb2\011\uffb2\012\uffb2\017\uffb2\020\uffb2\040" +
    "\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2" +
    "\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055" +
    "\uffb2\057\uffb2\066\uffb2\001\002\000\026\004\uffb9\037\uffb9" +
    "\042\uffb9\056\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064" +
    "\uffb9\065\uffb9\001\002\000\060\005\uffb4\006\uffb4\010\uffb4" +
    "\011\uffb4\012\uffb4\017\uffb4\020\uffb4\040\uffb4\041\uffb4\042" +
    "\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4" +
    "\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\057\uffb4\066" +
    "\uffb4\001\002\000\060\005\uffb3\006\uffb3\010\uffb3\011\uffb3" +
    "\012\uffb3\017\uffb3\020\uffb3\040\uffb3\041\uffb3\042\uffb3\043" +
    "\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3" +
    "\052\uffb3\053\uffb3\054\uffb3\055\uffb3\057\uffb3\066\uffb3\001" +
    "\002\000\060\005\uffb0\006\uffb0\010\uffb0\011\uffb0\012\uffb0" +
    "\017\uffb0\020\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044" +
    "\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0" +
    "\053\uffb0\054\uffb0\055\uffb0\057\uffb0\066\uffb0\001\002\000" +
    "\060\005\uffba\006\uffba\010\uffba\011\uffba\012\uffba\017\uffba" +
    "\020\132\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045" +
    "\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba" +
    "\054\uffba\055\uffba\057\133\066\131\001\002\000\052\005" +
    "\uffbf\006\uffbf\010\uffbf\011\uffbf\012\uffbf\017\uffbf\040\uffbf" +
    "\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047" +
    "\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf" +
    "\001\002\000\060\005\uffae\006\uffae\010\uffae\011\uffae\012" +
    "\uffae\017\uffae\020\uffae\040\uffae\041\uffae\042\uffae\043\uffae" +
    "\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052" +
    "\uffae\053\uffae\054\uffae\055\uffae\057\uffae\066\uffae\001\002" +
    "\000\052\005\uffc1\006\uffc1\010\uffc1\011\uffc1\012\uffc1\017" +
    "\uffc1\040\uffc1\041\uffc1\042\uffc1\043\124\044\123\045\uffc1" +
    "\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\121\054" +
    "\122\055\125\001\002\000\040\005\uffc4\006\uffc4\010\uffc4" +
    "\011\uffc4\012\uffc4\017\uffc4\040\uffc4\041\uffc4\042\116\045" +
    "\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\001\002" +
    "\000\060\005\uffb1\006\uffb1\010\uffb1\011\uffb1\012\uffb1\017" +
    "\uffb1\020\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1" +
    "\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053" +
    "\uffb1\054\uffb1\055\uffb1\057\uffb1\066\uffb1\001\002\000\036" +
    "\005\uffcd\006\uffcd\010\uffcd\011\uffcd\012\uffcd\017\uffcd\040" +
    "\uffcd\041\114\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd" +
    "\052\uffcd\001\002\000\034\005\uffcf\006\uffcf\010\uffcf\011" +
    "\uffcf\012\uffcf\017\uffcf\040\110\045\104\046\107\047\102" +
    "\050\106\051\103\052\111\001\002\000\006\005\uffd1\006" +
    "\uffd1\001\002\000\026\004\066\037\053\042\047\056\051" +
    "\060\050\061\062\062\057\063\054\064\067\065\073\001" +
    "\002\000\060\005\uffaf\006\uffaf\010\uffaf\011\uffaf\012\uffaf" +
    "\017\uffaf\020\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044" +
    "\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf" +
    "\053\uffaf\054\uffaf\055\uffaf\057\uffaf\066\uffaf\001\002\000" +
    "\006\005\uffd4\006\076\001\002\000\026\004\066\037\053" +
    "\042\047\056\051\060\050\061\062\062\057\063\054\064" +
    "\067\065\073\001\002\000\004\005\074\001\002\000\060" +
    "\005\uffac\006\uffac\010\uffac\011\uffac\012\uffac\017\uffac\020" +
    "\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac" +
    "\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054" +
    "\uffac\055\uffac\057\uffac\066\uffac\001\002\000\006\010\uffd6" +
    "\012\uffd6\001\002\000\052\005\uffbb\006\uffbb\010\uffbb\011" +
    "\uffbb\012\uffbb\017\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb" +
    "\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052" +
    "\uffbb\053\uffbb\054\uffbb\055\uffbb\001\002\000\026\004\066" +
    "\037\053\042\047\056\051\060\050\061\062\062\057\063" +
    "\054\064\067\065\073\001\002\000\006\005\uffd2\006\uffd2" +
    "\001\002\000\004\005\101\001\002\000\060\005\uffad\006" +
    "\uffad\010\uffad\011\uffad\012\uffad\017\uffad\020\uffad\040\uffad" +
    "\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047" +
    "\uffad\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad" +
    "\057\uffad\066\uffad\001\002\000\026\004\uffcc\037\uffcc\042" +
    "\uffcc\056\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc" +
    "\065\uffcc\001\002\000\026\004\uffc8\037\uffc8\042\uffc8\056" +
    "\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8" +
    "\001\002\000\026\004\uffcb\037\uffcb\042\uffcb\056\uffcb\060" +
    "\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\001\002" +
    "\000\026\004\066\037\053\042\047\056\051\060\050\061" +
    "\062\062\057\063\054\064\067\065\073\001\002\000\026" +
    "\004\uffca\037\uffca\042\uffca\056\uffca\060\uffca\061\uffca\062" +
    "\uffca\063\uffca\064\uffca\065\uffca\001\002\000\026\004\uffc9" +
    "\037\uffc9\042\uffc9\056\uffc9\060\uffc9\061\uffc9\062\uffc9\063" +
    "\uffc9\064\uffc9\065\uffc9\001\002\000\026\004\066\037\053" +
    "\042\047\056\051\060\050\061\062\062\057\063\054\064" +
    "\067\065\073\001\002\000\026\004\uffc7\037\uffc7\042\uffc7" +
    "\056\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065" +
    "\uffc7\001\002\000\016\005\uffd0\006\uffd0\010\uffd0\011\uffd0" +
    "\012\uffd0\017\uffd0\001\002\000\036\005\uffce\006\uffce\010" +
    "\uffce\011\uffce\012\uffce\017\uffce\040\uffce\041\114\045\uffce" +
    "\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce\001\002\000" +
    "\026\004\066\037\053\042\047\056\051\060\050\061\062" +
    "\062\057\063\054\064\067\065\073\001\002\000\036\005" +
    "\uffc6\006\uffc6\010\uffc6\011\uffc6\012\uffc6\017\uffc6\040\uffc6" +
    "\041\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052" +
    "\uffc6\001\002\000\026\004\066\037\053\042\047\056\051" +
    "\060\050\061\062\062\057\063\054\064\067\065\073\001" +
    "\002\000\036\005\uffc5\006\uffc5\010\uffc5\011\uffc5\012\uffc5" +
    "\017\uffc5\040\uffc5\041\uffc5\045\uffc5\046\uffc5\047\uffc5\050" +
    "\uffc5\051\uffc5\052\uffc5\001\002\000\026\004\066\037\053" +
    "\042\047\056\051\060\050\061\062\062\057\063\054\064" +
    "\067\065\073\001\002\000\026\004\uffbc\037\uffbc\042\uffbc" +
    "\056\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065" +
    "\uffbc\001\002\000\026\004\066\037\053\042\047\056\051" +
    "\060\050\061\062\062\057\063\054\064\067\065\073\001" +
    "\002\000\026\004\uffbd\037\uffbd\042\uffbd\056\uffbd\060\uffbd" +
    "\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\001\002\000" +
    "\026\004\uffbe\037\uffbe\042\uffbe\056\uffbe\060\uffbe\061\uffbe" +
    "\062\uffbe\063\uffbe\064\uffbe\065\uffbe\001\002\000\026\004" +
    "\066\037\053\042\047\056\051\060\050\061\062\062\057" +
    "\063\054\064\067\065\073\001\002\000\046\005\uffc2\006" +
    "\uffc2\010\uffc2\011\uffc2\012\uffc2\017\uffc2\040\uffc2\041\uffc2" +
    "\042\uffc2\043\124\044\123\045\uffc2\046\uffc2\047\uffc2\050" +
    "\uffc2\051\uffc2\052\uffc2\053\121\001\002\000\040\005\uffc3" +
    "\006\uffc3\010\uffc3\011\uffc3\012\uffc3\017\uffc3\040\uffc3\041" +
    "\uffc3\042\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3" +
    "\052\uffc3\001\002\000\052\005\uffc0\006\uffc0\010\uffc0\011" +
    "\uffc0\012\uffc0\017\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0" +
    "\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052" +
    "\uffc0\053\uffc0\054\uffc0\055\uffc0\001\002\000\026\004\066" +
    "\037\053\042\047\056\051\060\050\061\062\062\057\063" +
    "\054\064\067\065\073\001\002\000\004\037\134\001\002" +
    "\000\060\005\uffb5\006\uffb5\010\uffb5\011\uffb5\012\uffb5\017" +
    "\uffb5\020\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5" +
    "\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053" +
    "\uffb5\054\uffb5\055\uffb5\057\uffb5\066\uffb5\001\002\000\060" +
    "\005\uffb6\006\uffb6\010\uffb6\011\uffb6\012\uffb6\017\uffb6\020" +
    "\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6" +
    "\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054" +
    "\uffb6\055\uffb6\057\uffb6\066\uffb6\001\002\000\004\017\136" +
    "\001\002\000\060\005\uffb7\006\uffb7\010\uffb7\011\uffb7\012" +
    "\uffb7\017\uffb7\020\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7" +
    "\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052" +
    "\uffb7\053\uffb7\054\uffb7\055\uffb7\057\uffb7\066\uffb7\001\002" +
    "\000\006\010\uffdf\012\uffdf\001\002\000\006\010\uffda\012" +
    "\uffda\001\002\000\006\010\uffd7\012\uffd7\001\002\000\004" +
    "\011\004\001\002\000\010\010\uffde\012\uffde\025\144\001" +
    "\002\000\004\011\004\001\002\000\006\010\uffdd\012\uffdd" +
    "\001\002\000\026\007\043\011\004\024\037\026\031\030" +
    "\032\031\041\032\030\033\042\034\040\036\044\001\002" +
    "\000\006\010\uffe1\012\uffe1\001\002\000\014\002\uffff\010" +
    "\uffff\012\uffff\013\uffff\025\uffff\001\002\000\006\010\uffd8" +
    "\012\uffd8\001\002\000\004\011\004\001\002\000\006\010" +
    "\uffdc\012\uffdc\001\002\000\006\010\uffdb\012\uffdb\001\002" +
    "\000\010\021\ufff8\037\ufff8\066\ufff8\001\002\000\006\037" +
    "\160\066\157\001\002\000\004\060\161\001\002\000\006" +
    "\010\uffe9\013\uffe9\001\002\000\004\017\162\001\002\000" +
    "\010\021\ufffa\037\ufffa\066\ufffa\001\002\000\004\004\164" +
    "\001\002\000\022\005\uffe6\014\013\015\014\016\025\022" +
    "\020\027\015\037\016\057\026\001\002\000\010\021\175" +
    "\037\176\066\157\001\002\000\004\005\173\001\002\000" +
    "\006\005\uffe4\006\uffe4\001\002\000\006\005\uffe7\006\171" +
    "\001\002\000\020\014\013\015\014\016\025\022\020\027" +
    "\015\037\016\057\026\001\002\000\006\005\uffe5\006\uffe5" +
    "\001\002\000\004\011\004\001\002\000\006\010\uffe8\013" +
    "\uffe8\001\002\000\004\037\177\001\002\000\006\005\uffe2" +
    "\006\uffe2\001\002\000\006\005\uffe3\006\uffe3\001\002\000" +
    "\030\007\ufffe\011\ufffe\012\ufffe\024\ufffe\026\ufffe\030\ufffe" +
    "\031\ufffe\032\ufffe\033\ufffe\034\ufffe\036\ufffe\001\002\000" +
    "\024\014\013\015\014\016\025\022\020\023\022\027\015" +
    "\035\023\037\016\057\026\001\002\000\006\010\uffec\013" +
    "\uffec\001\002\000\020\014\013\015\014\016\025\022\020" +
    "\027\015\037\016\057\026\001\002\000\006\037\212\066" +
    "\157\001\002\000\006\006\207\012\210\001\002\000\006" +
    "\006\uffee\012\uffee\001\002\000\020\014\013\015\014\016" +
    "\025\022\020\027\015\037\016\057\026\001\002\000\010" +
    "\021\ufff5\037\ufff5\066\ufff5\001\002\000\006\006\uffef\012" +
    "\uffef\001\002\000\006\006\uffed\012\uffed\001\002\000\006" +
    "\010\uffea\013\uffea\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\006\002\004\003\005\001\001\000\020\004" +
    "\026\005\016\006\023\012\011\013\010\014\007\015\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\012\155\013\010\014" +
    "\007\015\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\154\014\007\015\020\001\001\000\012\003" +
    "\032\007\033\010\034\011\035\001\001\000\024\016\153" +
    "\017\063\020\062\021\060\022\057\023\055\024\054\025" +
    "\051\037\070\001\001\000\024\016\151\017\063\020\062" +
    "\021\060\022\057\023\055\024\054\025\051\037\070\001" +
    "\001\000\024\016\150\017\063\020\062\021\060\022\057" +
    "\023\055\024\054\025\051\037\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\016\141\017\063\020\062\021\060\022\057\023" +
    "\055\024\054\025\051\037\070\001\001\000\002\001\001" +
    "\000\024\016\140\017\063\020\062\021\060\022\057\023" +
    "\055\024\054\025\051\037\070\001\001\000\024\016\137" +
    "\017\063\020\062\021\060\022\057\023\055\024\054\025" +
    "\051\037\070\001\001\000\024\016\136\017\063\020\062" +
    "\021\060\022\057\023\055\024\054\025\051\037\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\016\064" +
    "\017\063\020\062\021\060\022\057\023\055\024\054\025" +
    "\051\033\071\034\067\037\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\104\001\001\000\002\001\001\000\024\016\077\017" +
    "\063\020\062\021\060\022\057\023\055\024\054\025\051" +
    "\037\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\023\074\024\054\025\051\037\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\016\076\017\063\020\062\021\060\022\057" +
    "\023\055\024\054\025\051\037\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\020\112\021" +
    "\060\022\057\023\055\024\054\025\051\037\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\016\111\017" +
    "\063\020\062\021\060\022\057\023\055\024\054\025\051" +
    "\037\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\021\114\022\057\023\055\024\054" +
    "\025\051\037\070\001\001\000\002\001\001\000\016\021" +
    "\116\022\057\023\055\024\054\025\051\037\070\001\001" +
    "\000\002\001\001\000\012\023\127\024\054\025\051\037" +
    "\070\001\001\000\002\001\001\000\016\021\126\022\057" +
    "\023\055\024\054\025\051\037\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\022\125\023\055\024\054" +
    "\025\051\037\070\001\001\000\004\036\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\016\134\017\063" +
    "\020\062\021\060\022\057\023\055\024\054\025\051\037" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\142" +
    "\001\001\000\002\001\001\000\004\003\144\001\001\000" +
    "\002\001\001\000\006\003\032\011\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\012\164\013\010\014\007\015\020\030\165\031" +
    "\167\032\166\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\012\164\013" +
    "\010\014\007\015\020\032\171\001\001\000\002\001\001" +
    "\000\004\003\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\006\201\012\011\013\010\014\007\015\020\001" +
    "\001\000\002\001\001\000\016\012\203\013\010\014\007" +
    "\015\020\026\204\027\205\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\012\203\013\010" +
    "\014\007\015\020\027\210\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorAST$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorAST$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorAST$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
  return getScanner().next_token(); 

    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorAST$actions {


  ClaseSemanticaTiny sem = new ClaseSemanticaTiny();

  private final ConstructorAST parser;

  /** Constructor */
  CUP$ConstructorAST$actions(ConstructorAST parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorAST$do_action_part00000000(
    int                        CUP$ConstructorAST$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorAST$parser,
    java.util.Stack            CUP$ConstructorAST$stack,
    int                        CUP$ConstructorAST$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorAST$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorAST$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= bloque 
            {
              Prog RESULT =null;
		int Bloqleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int Bloqright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Bloq Bloq = (Bloq)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.prog(Bloq);  
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorAST$parser.done_parsing();
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloque ::= LLAP declaraciones_opt instrucciones_opt LLCIERRE 
            {
              Bloq RESULT =null;
		int DecsOpleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int DecsOpright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		DecsOp DecsOp = (DecsOp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		int InstrOpleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int InstrOpright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		InstrsOp InstrOp = (InstrsOp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.bloq(DecsOp,InstrOp); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("bloque",1, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones_opt ::= declaraciones SEP 
            {
              DecsOp RESULT =null;
		int Decsleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int Decsright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		Decs Decs = (Decs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.si_decs(Decs); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("declaraciones_opt",2, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones_opt ::= 
            {
              DecsOp RESULT =null;
		 RESULT = sem.no_decs(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("declaraciones_opt",2, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones_opt ::= instrucciones 
            {
              InstrsOp RESULT =null;
		int Instrsleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int Instrsright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Instrs Instrs = (Instrs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.si_instrs(Instrs); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("instrucciones_opt",5, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones_opt ::= 
            {
              InstrsOp RESULT =null;
		 RESULT = sem.no_instrs(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("instrucciones_opt",5, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipo1 ::= tipo1 CAP LITERALENTERO CCIERRE 
            {
              Tipo RESULT =null;
		int Tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).left;
		int Tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).right;
		Tipo Tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		StringLocalizado num = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = (Tipo)sem.tipo_lista(Tipo, num.str()).ponFila(num.fila()).ponCol(num.col()); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("tipo1",8, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipo1 ::= tipo2 
            {
              Tipo RESULT =null;
		int Tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int Tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Tipo Tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = Tipo; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("tipo1",8, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo2 ::= CIRCUNFLEJO tipo2 
            {
              Tipo RESULT =null;
		int Tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int Tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Tipo Tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.tipo_circum(Tipo); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("tipo2",9, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo2 ::= tipo3 
            {
              Tipo RESULT =null;
		int Tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int Tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Tipo Tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = Tipo; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("tipo2",9, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo3 ::= tipoBasico 
            {
              Tipo RESULT =null;
		int Tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int Tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Tipo Tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = Tipo; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("tipo3",10, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo3 ::= STRUCT LLAP campos LLCIERRE 
            {
              Tipo RESULT =null;
		int Camposleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int Camposright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		Campos Campos = (Campos)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.tipo_struct(Campos); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("tipo3",10, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo3 ::= IDEN 
            {
              Tipo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = (Tipo)sem.tipo_iden(id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("tipo3",10, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipoBasico ::= ENT 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_int(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("tipoBasico",11, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipoBasico ::= REAL 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_real(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("tipoBasico",11, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipoBasico ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_bool(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("tipoBasico",11, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipoBasico ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_string(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("tipoBasico",11, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // campos ::= campos COMA campo 
            {
              Campos RESULT =null;
		int Camposleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int Camposright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		Campos Campos = (Campos)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		int Campoleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int Camporight = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Campo Campo = (Campo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.muchos_campos(Campos, Campo); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("campos",20, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // campos ::= campo 
            {
              Campos RESULT =null;
		int Campoleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int Camporight = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Campo Campo = (Campo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.un_campo(Campo); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("campos",20, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // campo ::= tipo1 IDEN 
            {
              Campo RESULT =null;
		int Tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int Tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		Tipo Tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = (Campo)sem.crea_campo(Tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("campo",21, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaraciones ::= declaraciones PYC declaracion 
            {
              Decs RESULT =null;
		int Decsleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int Decsright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		Decs Decs = (Decs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		int Decleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int Decright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Dec Dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.muchas_decs(Decs,Dec); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("declaraciones",3, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaraciones ::= declaracion 
            {
              Decs RESULT =null;
		int Decleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int Decright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Dec Dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.una_dec(Dec); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("declaraciones",3, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracion ::= tipo1 IDEN 
            {
              Dec RESULT =null;
		int Tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int Tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		Tipo Tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = (Dec)sem.dec_variable(Tipo,  id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracion ::= TYPE tipo1 IDEN 
            {
              Dec RESULT =null;
		int Tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int Tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		Tipo Tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = (Dec)sem.dec_tipo(Tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaracion ::= PROC IDEN PAP parametrosFormales_opt PCIERRE bloque 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)).value;
		int ParsFOpleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int ParsFOpright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		ParsFOp ParsFOp = (ParsFOp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		int Bloqleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int Bloqright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Bloq Bloq = (Bloq)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = (Dec)sem.dec_proc(id.str(), ParsFOp, Bloq).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-5)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parametrosFormales_opt ::= parametrosFormales 
            {
              ParsFOp RESULT =null;
		int ParsFleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int ParsFright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		ParsF ParsF = (ParsF)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.si_parsF(ParsF ); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("parametrosFormales_opt",22, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parametrosFormales_opt ::= 
            {
              ParsFOp RESULT =null;
		 RESULT = sem.no_parsF(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("parametrosFormales_opt",22, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parametrosFormales ::= parametrosFormales COMA parametroFormal 
            {
              ParsF RESULT =null;
		int ParsFleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int ParsFright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		ParsF ParsF = (ParsF)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		int ParFleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int ParFright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		ParF ParF = (ParF)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.muchos_parsF(ParsF, ParF); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("parametrosFormales",23, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parametrosFormales ::= parametroFormal 
            {
              ParsF RESULT =null;
		int ParFleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int ParFright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		ParF ParF = (ParF)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.un_parF(ParF); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("parametrosFormales",23, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametroFormal ::= tipo1 AMP IDEN 
            {
              ParF RESULT =null;
		int Tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int Tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		Tipo Tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = (ParF)sem.paramF(id.str(),Tipo).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("parametroFormal",24, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parametroFormal ::= tipo1 IDEN 
            {
              ParF RESULT =null;
		int Tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int Tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		Tipo Tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = (ParF)sem.param(id.str(),Tipo).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("parametroFormal",24, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instrucciones ::= instrucciones PYC instruccion 
            {
              Instrs RESULT =null;
		int Instrsleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int Instrsright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		Instrs Instrs = (Instrs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		int Instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int Instrright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Instr Instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.muchas_instrs(Instrs, Instr); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("instrucciones",6, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instrucciones ::= instruccion 
            {
              Instrs RESULT =null;
		int Instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int Instrright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Instr Instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.una_instr(Instr); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("instrucciones",6, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instruccion ::= EVAL E0 
            {
              Instr RESULT =null;
		int Expleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int Expright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Exp Exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.instr_eval(Exp); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruccion ::= IF E0 bloque 
            {
              Instr RESULT =null;
		int Expleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int Expright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		Exp Exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		int Bloqleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int Bloqright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Bloq Bloq = (Bloq)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.instr_if(Exp,Bloq) ; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccion ::= IF E0 bloque ELSE bloque 
            {
              Instr RESULT =null;
		int Expleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).left;
		int Expright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).right;
		Exp Exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		int Bloq1left = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int Bloq1right = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		Bloq Bloq1 = (Bloq)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		int Bloq2left = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int Bloq2right = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Bloq Bloq2 = (Bloq)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.instr_ifelse(Exp,Bloq1,Bloq2) ; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion ::= WHILE E0 bloque 
            {
              Instr RESULT =null;
		int Expleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int Expright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		Exp Exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		int Bloqleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int Bloqright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Bloq Bloq = (Bloq)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.instr_while(Exp ,Bloq) ; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccion ::= READ E0 
            {
              Instr RESULT =null;
		int Expleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int Expright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Exp Exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.instr_read(Exp) ; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccion ::= WRITE E0 
            {
              Instr RESULT =null;
		int Expleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int Expright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Exp Exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.instr_write(Exp) ; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion ::= NL 
            {
              Instr RESULT =null;
		 RESULT = sem.instr_nl(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= NEW E0 
            {
              Instr RESULT =null;
		int Expleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int Expright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Exp Exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.instr_new(Exp) ; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion ::= DELETE E0 
            {
              Instr RESULT =null;
		int Expleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int Expright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Exp Exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.instr_del(Exp); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccion ::= CALL IDEN PAP parametrosReales_opt PCIERRE 
            {
              Instr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		int ParsReOpleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int ParsReOpright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		ParsReOp ParsReOp = (ParsReOp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = (Instr)sem.instr_call(id.str(), ParsReOp ).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccion ::= bloque 
            {
              Instr RESULT =null;
		int Bloqleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int Bloqright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Bloq Bloq = (Bloq)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.instr_bloque(Bloq); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametrosReales_opt ::= parametrosReales 
            {
              ParsReOp RESULT =null;
		int ParsReleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int ParsReright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		ParsRe ParsRe = (ParsRe)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.si_parsRe(ParsRe ); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("parametrosReales_opt",25, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametrosReales_opt ::= 
            {
              ParsReOp RESULT =null;
		 RESULT = sem.no_parsRe(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("parametrosReales_opt",25, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametrosReales ::= parametrosReales COMA E0 
            {
              ParsRe RESULT =null;
		int ParsReleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int ParsReright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		ParsRe ParsRe = (ParsRe)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		int Expleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int Expright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Exp Exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.muchos_parsRe(ParsRe, Exp); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("parametrosReales",26, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametrosReales ::= E0 
            {
              ParsRe RESULT =null;
		int Expleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int Expright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Exp Exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.un_parRe(Exp); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("parametrosReales",26, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E0 ::= E1 ASIG E0 
            {
              Exp RESULT =null;
		int opnd1left = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int opnd1right = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		int opnd2left = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int opnd2right = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Exp opnd2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = (Exp)sem.asig(opnd1, opnd2).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E0",12, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E0 ::= E1 
            {
              Exp RESULT =null;
		int Expleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int Expright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Exp Exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = Exp; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E0",12, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E1 ::= E1 OP1 E2 
            {
              Exp RESULT =null;
		int opnd1left = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int opnd1right = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		int opnd2left = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int opnd2right = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Exp opnd2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = (Exp)sem.mkop(op.str(), opnd1 , opnd2).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E1",13, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E1 ::= E2 
            {
              Exp RESULT =null;
		int Expleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int Expright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Exp Exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = Exp; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E1",13, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OP1 ::= LT 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP1",27, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OP1 ::= GT 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP1",27, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OP1 ::= LE 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP1",27, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OP1 ::= GE 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP1",27, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OP1 ::= EQ 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP1",27, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OP1 ::= NE 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP1",27, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E2 ::= E2 MAS E3 
            {
              Exp RESULT =null;
		int opnd1left = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int opnd1right = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		int opnd2left = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int opnd2right = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Exp opnd2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = (Exp)sem.mkop(op.str(), opnd1 , opnd2).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E2",14, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E2 ::= E3 MENOS E3 
            {
              Exp RESULT =null;
		int opnd1left = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int opnd1right = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		int opnd2left = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int opnd2right = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Exp opnd2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = (Exp)sem.mkop(op.str(), opnd1 , opnd2).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E2",14, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E2 ::= E3 
            {
              Exp RESULT =null;
		int Expleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int Expright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Exp Exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = Exp; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E2",14, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E3 ::= E4 AND E3 
            {
              Exp RESULT =null;
		int opnd1left = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int opnd1right = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		int opnd2left = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int opnd2right = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Exp opnd2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = (Exp)sem.mkop(op.str(), opnd1 , opnd2).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E3",15, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E3 ::= E4 OR E4 
            {
              Exp RESULT =null;
		int opnd1left = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int opnd1right = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		int opnd2left = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int opnd2right = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Exp opnd2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = (Exp)sem.mkop(op.str(), opnd1 , opnd2).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E3",15, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E3 ::= E4 
            {
              Exp RESULT =null;
		int Expleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int Expright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Exp Exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = Exp; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E3",15, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E4 ::= E4 OP4 E5 
            {
              Exp RESULT =null;
		int opnd1left = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int opnd1right = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		int opnd2left = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int opnd2right = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Exp opnd2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = (Exp)sem.mkop(op.str(), opnd1 , opnd2).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E4",16, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E4 ::= E5 
            {
              Exp RESULT =null;
		int Expleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int Expright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Exp Exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = Exp; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E4",16, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OP4 ::= POR 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP4",28, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OP4 ::= DIV 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP4",28, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OP4 ::= MOD 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP4",28, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E5 ::= OP5 E5 
            {
              Exp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		int opndleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int opndright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Exp opnd = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = (Exp)sem.mkopUn(op.str(), opnd).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",17, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E5 ::= E6 
            {
              Exp RESULT =null;
		int Expleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int Expright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Exp Exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = Exp; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",17, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP5 ::= NOT 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP5",29, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP5 ::= MENOS 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP5",29, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E6 ::= E6 CAP E0 CCIERRE 
            {
              Exp RESULT =null;
		int opnd1left = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).left;
		int opnd1right = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).right;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		int opnd2left = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int opnd2right = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		Exp opnd2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = (Exp)sem.indexacion (opnd1 , opnd2).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E6",18, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E6 ::= E6 PUNTO IDEN 
            {
              Exp RESULT =null;
		int opnd1left = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int opnd1right = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = (Exp)sem.acceso(opnd1 , id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E6",18, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E6 ::= E6 CIRCUNFLEJO 
            {
              Exp RESULT =null;
		int opndleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int opndright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		Exp opnd = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = (Exp)sem.indireccion(opnd).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E6",18, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E6 ::= E7 
            {
              Exp RESULT =null;
		int Expleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int Expright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Exp Exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = Exp; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E6",18, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E7 ::= IDEN 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = (Exp)sem.iden(id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",19, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E7 ::= LITERALENTERO 
            {
              Exp RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		StringLocalizado num = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = (Exp)sem.lit_ent (num.str()).ponFila(num.fila()).ponCol(num.col()); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",19, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E7 ::= LITERALREAL 
            {
              Exp RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		StringLocalizado num = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = (Exp)sem.lit_real(num.str()).ponFila(num.fila()).ponCol(num.col()); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",19, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E7 ::= TRUE 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = (Exp) sem.lit_true().ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",19, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E7 ::= FALSE 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = (Exp) sem.lit_false().ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",19, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E7 ::= LITERALCADENA 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = (Exp)sem.lit_cadena(id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",19, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E7 ::= PAP E0 PCIERRE 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = exp; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",19, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E7 ::= NULL 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = (Exp)sem.lit_null().ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",19, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorAST$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorAST$do_action(
    int                        CUP$ConstructorAST$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorAST$parser,
    java.util.Stack            CUP$ConstructorAST$stack,
    int                        CUP$ConstructorAST$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorAST$do_action_part00000000(
                               CUP$ConstructorAST$act_num,
                               CUP$ConstructorAST$parser,
                               CUP$ConstructorAST$stack,
                               CUP$ConstructorAST$top);
    }
}

